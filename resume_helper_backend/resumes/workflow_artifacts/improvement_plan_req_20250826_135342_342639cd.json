{
  "edits": [
    {
      "type": "modify_bullet",
      "bullet_id": "bullet_1",
      "new_text": "\u2022 Designed and scaled a distributed backend system for an emergency communications platform serving 100,000+ users, using .NET (C# 9.0+), Python, and SQL Server; architected REST and gRPC APIs, reducing end-to-end latency by 40% and enabling seamless third-party integrations."
    },
    {
      "type": "insert_bullet",
      "role_id": "role_1",
      "after_bullet_id": "bullet_2",
      "text": "\u2022 Evaluated and implemented Apache Iceberg, Delta, and Hudi data lake technologies to improve data management and querying performance for the emergency communications platform."
    },
    {
      "type": "insert_bullet",
      "role_id": "role_1",
      "after_bullet_id": "bullet_3",
      "text": "\u2022 Designed and deployed a containerized, Kubernetes-based microservices architecture for the backend system, leveraging Docker and Terraform for infrastructure as code, to improve scalability and enable seamless deployments."
    },
    {
      "type": "modify_bullet",
      "bullet_id": "bullet_4",
      "new_text": "\u2022 Engineered and optimized high-performance PostgreSQL and SQL Server databases by tuning complex queries, implementing B-Tree and Hash indexes, and applying table partitioning, reducing query latency by 40% and boosting system scalability by 30% under production load."
    },
    {
      "type": "modify_bullet",
      "bullet_id": "bullet_5",
      "new_text": "\u2022 Automated database cluster provisioning, version upgrades, and seamless migrations using Python, Ansible, Terraform, and Docker, integrating with Jenkins CI/CD pipelines to cut deployment times by 50% and ensure zero-downtime releases across cloud environments."
    },
    {
      "type": "insert_bullet",
      "role_id": "role_2",
      "after_bullet_id": "bullet_6",
      "text": "\u2022 Designed and implemented a distributed data processing pipeline using Apache Spark and Apache Flink, enabling real-time data ingestion, transformation, and analytics for mission-critical business applications."
    },
    {
      "type": "insert_bullet",
      "role_id": "role_3",
      "after_bullet_id": "bullet_9",
      "text": "\u2022 Evaluated and recommended the adoption of Trino (formerly Presto) for high-performance SQL querying over large datasets, leading to a 30% improvement in analytical query response times."
    },
    {
      "type": "upsert_skill",
      "bucket": "Technical Skills",
      "value": "Apache Iceberg"
    },
    {
      "type": "upsert_skill",
      "bucket": "Technical Skills",
      "value": "Delta"
    },
    {
      "type": "upsert_skill",
      "bucket": "Technical Skills",
      "value": "Apache Hudi"
    },
    {
      "type": "upsert_skill",
      "bucket": "Technical Skills",
      "value": "Apache Flink"
    },
    {
      "type": "upsert_skill",
      "bucket": "Technical Skills",
      "value": "Trino (Presto)"
    },
    {
      "type": "upsert_skill",
      "bucket": "Technical Skills",
      "value": "Azure Network"
    }
  ],
  "constraints": {
    "max_bullets_per_role": 8,
    "forbid_fabrication": true
  }
}